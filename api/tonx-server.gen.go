// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search flights with filtering, sorting, and pagination
	// (GET /api/v1/flights/search)
	SearchFlights(c *gin.Context, params SearchFlightsParams)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SearchFlights operation middleware
func (siw *ServerInterfaceWrapper) SearchFlights(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFlightsParams

	// ------------- Required query parameter "departure_date" -------------

	if paramValue := c.Query("departure_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument departure_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "departure_date", c.Request.URL.Query(), &params.DepartureDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter departure_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchFlights(c, params)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/flights/search", wrapper.SearchFlights)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXXW/buBL9KwTvfWgBJZbdpi0E9MGN3d7gukkQZx+yiREw0thmK5HqkHLrLfzfF0PK",
	"smQpTrrY3SeL4ujM4XycoX/yWGe5VqCs4dFPbuIlZMI9jhE10kOOOge0EtzrWCdAvwmYGGVupVY88sbM",
	"7QXcrnPgEZfKwgKQbwKegTFi8eh32+3qU2NRqgXfbAKO8K2QCAmPbnmJvzWfbQL+MZWLpW3TFBJjFHO3",
	"Az9ElqeE+0GDVAv29t1bghE/JqAWdsmjkzDgmVTbZb9FJCDAVCrYw0NppVmyocTvYm2aoP3wGaiIciXS",
	"+1jadRN6olWi1V9HtDLbIzsIBydHYf9oEF4PBlEYRmH4Ow/4XGMmLI94Iiwcuc+6YFdCpuIhhXsDwtdK",
	"hdwvwyezIuNR2FUAD8LAfY4y7qiBS3rNpGImE2kKxrK4QAQVr1mhpGUv4HhxHLCYavQlD3Z+T8IwfNJz",
	"ArlAWyB0xPgcvrMbjV9/Pco71INx7oe/Gue5q+d7VWQPgHvFNuwPXjWpDp5mKpNmrmpECqlsZ7saK2zh",
	"c6wosLd8evq/8ei3yXjEAz4aT4Y37ul0eH46nvi3Z+f3l1cXn67G0yntXHy+nIyvxyM+qyWsAXO41WXC",
	"94Ox68FWVvcaqZWfvbYIdvJQHbZd4o2qnVWE9cMXiC2F6VKrRVt5jBVor8uqOHzInWkX/BQExksvcFdg",
	"cq0MtN0lwgr6lRYy9+K/CHMe8f/0dsreK2W9V6rlpvImEMWa1nmnPJ+6RrSMdlmVhqrh+l3FQ7ZT+UcH",
	"2rkDYHrOHFmWAzrkJyGttiI91YWybdBr2iu5ETRCrDEx9YaTyr55zQ8LxV5mXFQbjssQ1c7XzhmhSDXX",
	"bZZDZgAlGGI4vDwzbK6R+WywD1p/pak0XRsLGXmV1nXLY/srQONh+8fhcUgR0jkokUse8VfuFdG0S1cP",
	"PZHL3qrf881kesaVFe0soCOeV2ALVIYJlkpjiW/5IaNuSJhWzCOwGKUFlIJ9l3ZJiZRKEAgzRZ5rpJBR",
	"obp3Zwl1f62gjaOIIgMLaHh0u89jJCyQ96qT2Yubm5ubo8+fj0ajxhioCS6n+POIfysASQaUoDasqQFp",
	"L6+n2mIBQXntoWA0VLpLpVrTa9caLqm7ODxCpiyjncsE5qJIrav9Q33Q9n2goR7z7Cq323voRkvpvjFY",
	"n0Xmo4Q0YVYzo9EyuwSGYIqUCmf9CCGy/LBu0NkOnKcEvCbNbeWePSNvU2KpMQFkL4SJQSXUYxoZmfnV",
	"ywO0L+jL7kByYWKqz/IkfkWoz+L1f1gfrURaAMuFRC8Uc5lSp6nFVt2O2XB75HLTRHfqiDXHYsRGVfPQ",
	"mhF/MqsPy4gN/WrPxI/aiK629FBt+HEZbcXLL2mjMayrfb+8U3dq7Ps12hK+bZKdvd/exu6KMBy82VrV",
	"uc7e+1vxnoVnOHu/dxu/U04l8tT9Y/GN3pXOEqeRTJEkkhIi0svGtG1dr1pT29h16jUH8ovy7YwUxw9w",
	"hzIIQ/9XSlnwM03keSpjJxu9L4YK4WeNzaGR3nlLcJNor96LOAZj5kXKKlUmvq//Ri7+L2OH8zO1EqlM",
	"WE3xNwE/+XdcW0AlUhrAK0AGpWHATZFlAtfVYKoGnZtnVc8FTtDcg1BJXd8JpJfKFSgwpjZQm1PvE9jJ",
	"1uYfrAN3Ge04/5Yfw1pxuOO7ePjRW2DKI760No96vVTHIl1qY6N34buQb2abPwMAAP//rQYWdSYQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
