// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search flights with filtering, sorting, and pagination
	// (GET /api/v1/flights/search)
	SearchFlights(c *gin.Context, params SearchFlightsParams)
	// Submit a new flight booking order
	// (POST /api/v1/orders)
	CreateOrder(c *gin.Context)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SearchFlights operation middleware
func (siw *ServerInterfaceWrapper) SearchFlights(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFlightsParams

	// ------------- Required query parameter "departure_date" -------------

	if paramValue := c.Query("departure_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument departure_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "departure_date", c.Request.URL.Query(), &params.DepartureDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter departure_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchFlights(c, params)
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrder(c)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/flights/search", wrapper.SearchFlights)
	router.POST(options.BaseURL+"/api/v1/orders", wrapper.CreateOrder)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
