// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search flights with filtering, sorting, and pagination
	// (GET /api/v1/flights/search)
	SearchFlights(c *gin.Context, params SearchFlightsParams)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SearchFlights operation middleware
func (siw *ServerInterfaceWrapper) SearchFlights(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFlightsParams

	// ------------- Required query parameter "departure_date" -------------

	if paramValue := c.Query("departure_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument departure_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "departure_date", c.Request.URL.Query(), &params.DepartureDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter departure_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchFlights(c, params)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/flights/search", wrapper.SearchFlights)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXW2/bNhT+KwS3hxaQY9ld1kJAH9za7YKlSdB0D1ljGIx0bLOlSPWQcusV/u/DIWVb",
	"txgtBuzJInkuH8/to7/z1OSF0aCd5cl3btM15MJ/zhAN0keBpgB0Evx2ajKg3wxsirJw0mieBGHmzyLu",
	"tgXwhEvtYAXIdxHPwVqxelRvf3xQtQ6lXvHdLuIIX0qJkPHkI6/s78Xnu4i/UXK1dl2YQmKKYulP4JvI",
	"C0V2XxmQesWev3je9RWRjpIaWioonbRrNpH4VWxtrx6i3Ai1SKXbNpUvjc6MPqXjZN5yOI7H54N4NBjH",
	"H8bjJI6TOP6bR3xpMBeOJzwTDgZerc/sRkglHhQsLIiQ0oPl0Xncl5sHYWFRoEx70nND20xqZnOhFFjH",
	"0hIRdLplpZaOPYGz1VnEUiqfpzw6+jqP415nGRQCXYnQE6wr+MruDH7uu9dR72TARvHPBmzp62ehy/wB",
	"sJX5yWj8rE9HZs241nyVUrveDrBOuDLkQ5c5FfPt6z9m078uZ1Me8enscnLnv15Prl7PLsPuxdXi5v31",
	"2/ez21s6uX53czn7MJvyeS3QDTMdpM44oXpKYdyXnd1hyzx8gtSRgRuxklqEauhMAl8KblFUnV0PSDcA",
	"JLWw8p+WaG+VBNjSQd6Eff6jqI1edfFaJ9B9qMrn9KA5is475klW6qXpdsuEWUAJlpklm9xcWLY0yMKA",
	"Yq+M+Uyj53ZrHeSUK+l8/h473wDaYHZ0Fp/FdC1TgBaF5Al/5rcoqG7t7zYUhRxuRsNQznZoQWC6ppMV",
	"uC7S9+BK1JYJpqR1hLdSZDQNMmY0CxZYitIBSsG+SrdmxaEcmC2LwiAVO8XY711kVI9eL9zKeogocnCA",
	"licf2zimwgF5P7Q3e3J3d3c3ePduMJ02BkqtyznFnyf8Swm45RHXglJaGxHU8LyeUIclRBW3UTAao6GP",
	"dTpzUKyAhRnhk3qMwyNgikBnR5cZLEWpnG+OXGqZ0xAY9ZVz2/dVcGuWzDcEK8D7hxOeb6nN+r3HEc/F",
	"t8o9TYGfA/NGgsqYM8wadMytgSHYUlHhbB8BRJKvtg04+xHYmuotVmxQU5fa5j+Qt1tCaTADZE+ETUFn",
	"1GMGGYmF1dMTsK9Jsz+QXNiU6rO6SViR1R/C9SdsBxuhSmCFkBgGxVIq6jS9Ygipwcyescn+ytWhTe71",
	"gDU5NGHTQ/PQmhF+Equ/ShI2CauWSHjwJPS4oY/DQWCrZD+8wpIOGnR5OA/Le32vZ6Ffkz3gj02w85d7",
	"kr8v43j8+16qjnX+MryaWhIB4fxl6z12r/2UKJR/loZG70tnZaeRTJFlkhIi1E2DKLo02iYY67YqzBwo",
	"rqvdOU0cWxhtg5VxHIf3snag/QwWRaFk6sfG8JMNlHpE0ySrTDi/eyDBXxGWPOG/DI8P9mH1Wh9Wj+Aj",
	"UoEothXr1vj7lI0a0/dw6m4XtVurTFOwdlkqdiAA8vjbT177FKbwF6TH+YXeCCUzViOXXcTP/x/XDlAL",
	"RVy/AWRQCUbclnkucHvgwAOneuo8tHfkZ6f/EDqrUwkZGSq5AQ3W1ri7SbBvwV3uZf5jyZ2sB+NHV+f+",
	"e3xs75mE/PV9PALLl6h4wtfOFclwqEwq1NpYl7yIX8R8N9/9GwAA//9aUZlhdg4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
