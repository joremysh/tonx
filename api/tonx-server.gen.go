// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search flights with filtering, sorting, and pagination
	// (GET /api/v1/flights/search)
	SearchFlights(c *gin.Context, params SearchFlightsParams)
	// Submit a new flight booking order
	// (POST /api/v1/orders)
	CreateOrder(c *gin.Context)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SearchFlights operation middleware
func (siw *ServerInterfaceWrapper) SearchFlights(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFlightsParams

	// ------------- Optional query parameter "departure_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "departure_date", c.Request.URL.Query(), &params.DepartureDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter departure_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchFlights(c, params)
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrder(c)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/flights/search", wrapper.SearchFlights)
	router.POST(options.BaseURL+"/api/v1/orders", wrapper.CreateOrder)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
