// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search flights with filtering, sorting, and pagination
	// (GET /api/v1/flights/search)
	SearchFlights(c *gin.Context, params SearchFlightsParams)
	// Submit a new flight booking order
	// (POST /api/v1/orders)
	CreateOrder(c *gin.Context)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SearchFlights operation middleware
func (siw *ServerInterfaceWrapper) SearchFlights(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFlightsParams

	// ------------- Required query parameter "departure_date" -------------

	if paramValue := c.Query("departure_date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument departure_date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "departure_date", c.Request.URL.Query(), &params.DepartureDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter departure_date: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchFlights(c, params)
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrder(c)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/flights/search", wrapper.SearchFlights)
	router.POST(options.BaseURL+"/api/v1/orders", wrapper.CreateOrder)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ON07RBgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
