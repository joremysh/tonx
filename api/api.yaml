openapi: "3.0.0"
info:
  version: 1.0.0
  title: Flight Booking System
  description: A series of APIs for Flight Booking System
servers:
  - url: http://localhost:8080
paths:
  /liveness:
    get:
      responses:
        "200":
          description: liveness response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pong"

  /api/v1/flights/search:
    get:
      summary: Search flights with filtering, sorting, and pagination
      description: Returns a list of flights based on search criteria with pagination support
      operationId: searchFlights
      parameters:
        - name: departure_date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Date of departure (YYYY-MM-DD)
          example: "2025-01-20"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [departure_time, arrival_time, base_price, available_seats]
          description: Field to sort the results by
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order (ascending or descending)
        - name: filters
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            additionalProperties:
              type: string
          description: |
            Key-value pairs for filtering records. Available filters:
            - departure_city: Departure city name
            - arrival_city: Arrival city name
            - airline: Airline name
            - status: Flight status
            - flight_number: Flight number

            Example: filters[departure_city]=New York&filters[arrival_city]=London&filters[airline]=British Airways
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Flight"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Pong:
      type: object
      required:
        - startTime
      properties:
        startTime:
          type: string
    Flight:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        flight_number:
          type: string
          example: "BA123"
        airline:
          type: string
          example: "British Airways"
        departure_city:
          type: string
          example: "New York"
        arrival_city:
          type: string
          example: "London"
        departure_time:
          type: string
          format: date-time
          example: "2025-01-20T10:00:00Z"
        arrival_time:
          type: string
          format: date-time
          example: "2025-01-20T22:00:00Z"
        aircraft:
          type: string
          example: "Boeing 787"
        status:
          type: string
          enum: [SCHEDULED, DELAYED, CANCELLED, IN_PROGRESS, COMPLETED]
          example: "SCHEDULED"
        total_seats:
          type: integer
          example: 200
        available_seats:
          type: integer
          example: 150
        base_price:
          type: integer
          description: Price in smallest currency unit (e.g., cents)
          example: 5000

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        total_items:
          type: integer
          example: 50

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
