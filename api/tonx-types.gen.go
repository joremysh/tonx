// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for FlightStatus.
const (
	FlightStatusCANCELLED  FlightStatus = "CANCELLED"
	FlightStatusCOMPLETED  FlightStatus = "COMPLETED"
	FlightStatusDELAYED    FlightStatus = "DELAYED"
	FlightStatusINPROGRESS FlightStatus = "IN_PROGRESS"
	FlightStatusSCHEDULED  FlightStatus = "SCHEDULED"
)

// Defines values for OrderStatus.
const (
	OrderStatusCANCELLED OrderStatus = "CANCELLED"
	OrderStatusCOMPLETED OrderStatus = "COMPLETED"
	OrderStatusCONFIRMED OrderStatus = "CONFIRMED"
	OrderStatusPENDING   OrderStatus = "PENDING"
)

// Defines values for SearchFlightsParamsSortBy.
const (
	ArrivalTime    SearchFlightsParamsSortBy = "arrival_time"
	AvailableSeats SearchFlightsParamsSortBy = "available_seats"
	BasePrice      SearchFlightsParamsSortBy = "base_price"
	DepartureTime  SearchFlightsParamsSortBy = "departure_time"
)

// Defines values for SearchFlightsParamsSortOrder.
const (
	Asc  SearchFlightsParamsSortOrder = "asc"
	Desc SearchFlightsParamsSortOrder = "desc"
)

// CreateOrderRequest defines model for CreateOrderRequest.
type CreateOrderRequest struct {
	// CustomerId ID of the customer making the booking
	CustomerId uint `json:"customer_id"`

	// FlightId ID of the flight to book
	FlightId uint `json:"flight_id"`

	// TicketAmount Number of tickets to book
	TicketAmount int `json:"ticket_amount"`
}

// Customer defines model for Customer.
type Customer struct {
	Email openapi_types.Email `json:"email"`
	Id    *uint               `json:"id,omitempty"`
	Name  string              `json:"name"`
	Phone string              `json:"phone"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Flight defines model for Flight.
type Flight struct {
	Aircraft       string    `json:"aircraft"`
	Airline        string    `json:"airline"`
	ArrivalCity    string    `json:"arrival_city"`
	ArrivalTime    time.Time `json:"arrival_time"`
	AvailableSeats int       `json:"available_seats"`

	// BasePrice Price in smallest currency unit (e.g., cents)
	BasePrice     int          `json:"base_price"`
	DepartureCity string       `json:"departure_city"`
	DepartureTime time.Time    `json:"departure_time"`
	FlightNumber  string       `json:"flight_number"`
	Id            uint         `json:"id"`
	Status        FlightStatus `json:"status"`
}

// FlightStatus defines model for Flight.Status.
type FlightStatus string

// Order defines model for Order.
type Order struct {
	BookingTime time.Time   `json:"booking_time"`
	Customer    *Customer   `json:"customer,omitempty"`
	CustomerId  uint        `json:"customer_id"`
	Flight      *Flight     `json:"flight,omitempty"`
	FlightId    uint        `json:"flight_id"`
	Id          uint        `json:"id"`
	OrderNumber string      `json:"order_number"`
	Status      OrderStatus `json:"status"`

	// TotalAmount Total amount in smallest currency unit (e.g., cents)
	TotalAmount int `json:"total_amount"`
}

// OrderStatus defines model for Order.Status.
type OrderStatus string

// Pong defines model for Pong.
type Pong struct {
	StartTime string `json:"startTime"`
}

// SearchFlightResponse defines model for SearchFlightResponse.
type SearchFlightResponse struct {
	Data []Flight `json:"data"`

	// Page Current page number
	Page int `json:"page"`

	// PageSize Number of items per page
	PageSize int `json:"pageSize"`

	// TotalCount Total number of records
	TotalCount int64 `json:"totalCount"`
}

// SearchFlightsParams defines parameters for SearchFlights.
type SearchFlightsParams struct {
	// DepartureDate Date of departure (YYYY-MM-DD)
	DepartureDate *openapi_types.Date `form:"departure_date,omitempty" json:"departure_date,omitempty"`

	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// SortBy Field to sort the results by
	SortBy *SearchFlightsParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Sort order (ascending or descending)
	SortOrder *SearchFlightsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Filters Key-value pairs for filtering records. Available filters:
	// - departure_city: Departure city name
	// - arrival_city: Arrival city name
	// - airline: Airline name
	// - flight_number: Flight number
	//
	// Example: filters[departure_city]=New York&filters[arrival_city]=London&filters[airline]=British Airways
	Filters *map[string]string `json:"filters,omitempty"`
}

// SearchFlightsParamsSortBy defines parameters for SearchFlights.
type SearchFlightsParamsSortBy string

// SearchFlightsParamsSortOrder defines parameters for SearchFlights.
type SearchFlightsParamsSortOrder string

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = CreateOrderRequest
